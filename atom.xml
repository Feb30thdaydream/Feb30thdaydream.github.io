<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Feb30thdaydream.github.io</id>
    <title>小小余的海洋</title>
    <updated>2022-07-09T07:55:02.217Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Feb30thdaydream.github.io"/>
    <link rel="self" href="https://Feb30thdaydream.github.io/atom.xml"/>
    <subtitle>sometime people don&apos;t say goodbye but walk more and more far away each other.</subtitle>
    <logo>https://Feb30thdaydream.github.io/images/avatar.png</logo>
    <icon>https://Feb30thdaydream.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 小小余的海洋</rights>
    <entry>
        <title type="html"><![CDATA[Makedown语法]]></title>
        <id>https://Feb30thdaydream.github.io/post/makedown/</id>
        <link href="https://Feb30thdaydream.github.io/post/makedown/">
        </link>
        <updated>2022-07-09T05:52:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-一级标题语法标题三个及以上需要单独一行如一级标题">1、一级标题<br>
语法：“标题”+“===”（三个及以上，需要单独一行）<br>
如：一级标题</h1>
<h2 id="2-二级标题语法标题-三个及以上需要单独一行如二级标题">2、二级标题<br>
语法：标题”+“---”（三个及以上，需要单独一行）<br>
如：二级标题</h2>
<p>3、三级标题<br>
不加任何符号就是三级标题</p>
<p>4、四级标题<br>
语法：一个波浪线+内容+一个波浪线<br>
如：<sub>内容</sub></p>
<p>5、分割线“***”<br>
语法：星号（三个及以上，需要单独一行）<br>
如：</p>
<hr>
<p>6、斜体<br>
语法：一个星号+”内容“+一个星号<br>
如：<em>内容</em></p>
<p>7、粗体<br>
语法：两个星号+”内容“+两个星号<br>
如：<strong>内容</strong></p>
<p>8、粗体加斜体<br>
语法：三个星号+”内容“+三个星号<br>
如：<em><strong>内容</strong></em></p>
<p>9、标黄<br>
语法：两个‘=’+“内容”+两个‘=’<br>
如：<mark>内容</mark></p>
<p>10、删除线<br>
语法：两个波浪线+内容+两个波浪线<br>
如：<s>内容</s></p>
<p>11、无序列表<br>
语法：加号、减号、乘号+空格（可多次叠加）+内容<br>
注意：需要空一行才能跳出无序列表<br>
如：</p>
<ul>
<li>一层</li>
</ul>
<ul>
<li>
<ul>
<li>二层</li>
</ul>
</li>
</ul>
<ul>
<li>
<ul>
<li>
<ul>
<li>三层</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>12、有序列表<br>
语法：数字+‘.’+空格（可嵌套两层）<br>
注意：需要空一行才能跳出有序列表<br>
如：</p>
<ol>
<li>内容<br>
1.1. 内容<br>
1.2. 内容</li>
<li>内容</li>
<li>内容</li>
</ol>
<p>13、文字引用<br>
语法：'&gt;'+内容（可多层嵌套）<br>
注意：需要空一行才能跳出文字引用<br>
如：</p>
<blockquote>
<p>第一层</p>
<blockquote>
<p>第二层<br>
第二层</p>
<blockquote>
<p>第三层</p>
</blockquote>
</blockquote>
</blockquote>
<p>14、行内代码块<br>
语法：反引号+代码+反引号<br>
如：Use the <code>printf()</code> function.</p>
<p>15、代码块<br>
语法：三个反引号（独一行）+代码+三个反引号（独一行）<br>
如：</p>
<pre><code>#include&lt;iostream&gt;
int main(){
	printf(&quot;HelloWorld&quot;);
}
</code></pre>
<p>16、支持原生html语法<br>
如：<br>
<span style="display:block;text-align:right;color:orangered;">橙色居右</span><br>
<span style="display:block;text-align:center;color:orangered;">橙色居中</span></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ES6——类]]></title>
        <id>https://Feb30thdaydream.github.io/post/es6-lei/</id>
        <link href="https://Feb30thdaydream.github.io/post/es6-lei/">
        </link>
        <updated>2022-07-06T10:10:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="创建类">🔵创建类</h2>
<p>创建类class<br>
语法：<code>class name{}</code><br>
🔸在ES6中没有变量提升，所以必须先定义类才能通过类实例化对象</p>
<pre><code>class Father{
    /*construction（）方法时类的构造函数（默认方法，不需要加function），用于传递参数，返回实例对象，通过new命令生成对象实例时，自动调用该方法，如果没有显示定义，类的内部会自动给我们创建一个construction（）*/
                 
    constructor(name,age){
        /*construction里面的this指向的是创建的实例对象*/
        this.name=name;
        this.age=age;
        }
}
//利用类创建对象（类必须使用new实例化对象）
var user=new Father('one',18);
console.log(user);
</code></pre>
<h2 id="类中添加共有方法">🔵类中添加共有方法</h2>
<pre><code>class Father{
    constructor(name,age){
        this.name=name;
        this.age=age;
    }
//类添加方法（类里面所有的函数不需要写function，多个函数之间不需要用逗号分割）
    some(){
        console.log(this.name+this.age);
    }
}
</code></pre>
<h2 id="类的继承">🔵类的继承</h2>
<pre><code>class Father{
    constructor(name,age){
        this.name=name;
        this.age=age;
    }
    sum(){
        console.log(this.name+this.age);
    }
}
class Son extends Father{
    constructor(name,age){
    //super关键字:用于访问和调用对象父类上的函数（包括构造函数和普通函数)，super必须在子类this之前调用
    super(name,age);//调用父类中的构造函数
    }
}
var son=new Son('monkey',2333);
son.sum();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[哈希表]]></title>
        <id>https://Feb30thdaydream.github.io/post/ha-xi-biao/</id>
        <link href="https://Feb30thdaydream.github.io/post/ha-xi-biao/">
        </link>
        <updated>2022-06-20T06:18:14.000Z</updated>
        <content type="html"><![CDATA[<p>哈希表装填因子α=哈希表中元素个数/哈希表长<br>
哈希表关键字为小于等于哈希表长的最大素数</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[快速排序]]></title>
        <id>https://Feb30thdaydream.github.io/post/kuai-su-pai-xu/</id>
        <link href="https://Feb30thdaydream.github.io/post/kuai-su-pai-xu/">
        </link>
        <updated>2022-06-20T02:41:30.000Z</updated>
        <content type="html"><![CDATA[<p>1、每次将第一个元素作为中心元素移出<br>
2、在原第一元素和最后一个元素处设置'L'和'R'指针<br>
3、当'R'处元素小于中心元素，则把'R'处元素移至'L'处，同时，将'L'处指针向前移一位；同样，当'L'处元素小于中心元素，则把'L'处元素移至'R'处，同时，将'R'处指针向前移一位。<br>
4、当'R'或'L'处元素等于中心元素时，不移动，此时'R'或'L'处指针移动一位<br>
5、直到'R'和'L'处指针重合，将中心元素放到'R'和'L'处指针重合处，完成该次排序。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[由先序和中序求后序二叉树]]></title>
        <id>https://Feb30thdaydream.github.io/post/you-xian-xu-he-zhong-xu-qiu-hou-xu-er-cha-shu/</id>
        <link href="https://Feb30thdaydream.github.io/post/you-xian-xu-he-zhong-xu-qiu-hou-xu-er-cha-shu/">
        </link>
        <updated>2022-06-19T16:03:07.000Z</updated>
        <content type="html"><![CDATA[<pre><code>BinTree Build(int pre[] ,int in[] ,int size)
{
	if(size&lt;=0)
        return NULL;
	//先在中序中找到根节点
	int i;
	for(i=0;i&lt;size;i++)
	{
		if(in[i]==pre[0])break;
	} 
	BinTree tree=(BinTree)malloc(sizeof(struct node));
	tree-&gt;date=pre[0];
	tree-&gt;left=Build(pre+1,in,i);
	tree-&gt;right=Build(pre+i+1,in+i+1,size-1-i);
	return tree;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[双向循环链表]]></title>
        <id>https://Feb30thdaydream.github.io/post/shuang-xiang-xun-huan-lian-biao/</id>
        <link href="https://Feb30thdaydream.github.io/post/shuang-xiang-xun-huan-lian-biao/">
        </link>
        <updated>2022-06-19T14:40:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="p结点之前插入"><img src="https://Feb30thdaydream.github.io/post-images/1655649681753.jpg" alt="" loading="lazy"><br>
🔵p结点之前插入</h2>
<pre><code>void Inter(Node* head,int add,int data){
    Node *s=(Node*)malloc(sizeof(Node));
    temp-&gt;data=data;
    temp-&gt;prior=NULL;
    temp-&gt;next=NULL; 
    
    Node * p=head;
    for (int i=1; i&lt;add-1; i++){ /*找到要插入位置的前一个结点*/
            p=p-&gt;next;
    }
    s-&gt;prior=p-&gt;prior;
    p-&gt;prior-&gt;next=s;
    s-&gt;next=p;
    p-&gt;prior=s;
}
</code></pre>
<h2 id="p结点之后插入">🔵p结点之后插入</h2>
<pre><code>void Inter(Node* head,int add,int data){
    Node *s=(Node*)malloc(sizeof(Node));
    temp-&gt;data=data;
    temp-&gt;prior=NULL;
    temp-&gt;next=NULL; 
    
    Node * p=head;
    for (int i=1; i&lt;add; i++){ /*找到要插入位置的前一个结点*/
            p=p-&gt;next;
    }
    s-&gt;next=p-&gt;next;
    p-&gt;next-&gt;prior=s;
    s-&gt;prior=p;
    p-&gt;next=s;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[时间和空间复杂度]]></title>
        <id>https://Feb30thdaydream.github.io/post/1/</id>
        <link href="https://Feb30thdaydream.github.io/post/1/">
        </link>
        <updated>2022-06-18T16:24:35.000Z</updated>
        <content type="html"><![CDATA[<p>🔵顺序表中插入、删除、查找的时间复杂度为O(n)<br>
🔵单链表中按值查找、按序号查找、求表长的时间复杂度为O(n)<br>
单链表中插入和删除的时间复杂度应分情况讨论<br>
&lt;1&gt;给定前驱结点，则时间复杂度为O(1)<br>
&lt;2&gt;仅仅知道待删（待插）结点，则时间复杂度为O(n)<br>
🔵堆栈中出栈和入栈的时间复杂度为O(1)<br>
🔵队列中出队和入队的时间复杂度为O(1)<br>
🔵二叉树中遍历的时间复杂度为O(n)<br>
🔵折半查找的时间复杂度为O(log2n)<br>
🔵快速排序的平均时间复杂度为O(nlog2n)，<br>
最坏时间复杂度为O(n^2),<br>
最优空间复杂度为O(log2n)，<br>
最坏空间复杂度为O(n),<br>
平均情况下辅助空间复杂度为O(log2n)，<br>
空间复杂度为O(n)<br>
🔵堆排序中初始建堆的时间复杂度为O(n)，<br>
最坏情况下的时间复杂度为O(nlog2n),<br>
空间复杂度为O(1)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[堆排序]]></title>
        <id>https://Feb30thdaydream.github.io/post/dui-pai-xu/</id>
        <link href="https://Feb30thdaydream.github.io/post/dui-pai-xu/">
        </link>
        <updated>2022-06-18T16:08:50.000Z</updated>
        <content type="html"><![CDATA[<p>堆排序：堆排序是在排序过程中，将向量中储存的数据看成一棵完全二叉树，利用完全二叉树中双亲结点和孩子结点之间的关系来选择关键字的记录。<br>
注：待排序计入仍采用向量数组方式储存，并非采用树的储存结构，而仅仅采用完全二叉树的顺序结构的特征进行分析。</p>
<p>大根堆：完全二叉树中任意结点的关键字小于或等于其左孩子和右孩子的关键字<br>
小根堆：完全二叉树中任意结点的关键字大于或等于其左孩子和右孩子的关键字</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树与二叉树]]></title>
        <id>https://Feb30thdaydream.github.io/post/shu-yu-er-cha-shu/</id>
        <link href="https://Feb30thdaydream.github.io/post/shu-yu-er-cha-shu/">
        </link>
        <updated>2022-05-10T13:49:06.000Z</updated>
        <content type="html"><![CDATA[<p>🔵树的相关术语<br>
结点的度：一个结点的子树个数称为此节点的度（二叉树的结点的度0&lt;=n&lt;=2）<br>
树的度：树中所有结点的度的最大值（二叉树的度0&lt;=n&lt;=2）<br>
孩子结点：一个结点的直接后继称为该结点的孩子结点<br>
双亲结点：一个结点的直接前驱称为该结点的双亲结点<br>
结点的层次：从根结点开始定义，根结点的层次为1，根的直接后继的层次为2，以此类推<br>
树的深度：树中所有结点的层次的最大值<br>
完全二叉树：深度为k，结点数为n的二叉树，如果其结点1<sub>n的位置序号分别与等高的满二叉树的结点1</sub>n的位置序号一一对应，则为完全二叉树<br>
🔵二叉树的五种形态<br>
🔵二叉树的五个性质<br>
性质一：在二叉树的第i层上至多有2^(i-1)个结点<br>
性质二：深度为k的二叉树至多有2^k-1个结点<br>
性质三：对任意一棵二叉树T，若终端结点数为n0，而其度数为2的结点数为n2，则n0=n2+1<br>
性质四：具有n个结点的完全二叉树的深度为|log2 n|+1<br>
性质五：具有n个结点的完全二叉树，如果按照从上到下，从左到右<br>
🔵二叉树的顺序储存<br>
将二叉树中编号为i的结点存放在数组的第i个分量中；结点i的左孩子的位置为LChild(i)=2i,右孩子的位置为RChild(i)=2i-1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[队列]]></title>
        <id>https://Feb30thdaydream.github.io/post/dui-lie/</id>
        <link href="https://Feb30thdaydream.github.io/post/dui-lie/">
        </link>
        <updated>2022-04-30T04:39:17.000Z</updated>
        <content type="html"><![CDATA[<p>在队列中，允许插入的一端为队尾（rear），允许删除的一端成为队头（front）</p>
<h1 id="链队列">🔵链队列</h1>
<h2 id="链队列定义">🔸链队列定义</h2>
<pre><code>typedef struct QueueNode{
    ElemType data;
    struct QueueNode *next; 
}QueueNode;

typedef struct LinkQueue{
    QueueNode *front;//队头指针
    QueueNode *rear;//队尾指针 
}LinkQueue; 
</code></pre>
<h2 id="链队列初始化">🔸链队列初始化</h2>
<pre><code>void InitQueue(LinkQueue *Q){
    QueueNode *s=(QueueNode *)malloc(sizeof(QueueNode));//申请头结点内存空间 
        if(s!=NULL);
            Q-&gt;front=Q-&gt;rear=s;//初始化时，将头指针和尾指针都指向头结点
            Q-&gt;rear-&gt;next=NULL; //将头指针的下一节点赋空 
        else
            return 0;//溢出
} 
</code></pre>
<h2 id="链队列入队操作">🔸链队列入队操作</h2>
<pre><code>EnQueue(LinkQueue *Q,ElemType x){
    QueueNode *s=(QueueNode *)malloc(sizeof(QueueNode));
        if(s!=NULL)
            s-&gt;data=x;
            s-&gt;next=NULL;
            Q-&gt;rear-&gt;next=s;
            Q-&gt;rear=s;//更改尾指针的指向 
} 
</code></pre>
<h2 id="链队列出队操作">🔸链队列出队操作</h2>
<pre><code>void DeQueue(LinkQueue *Q){
    if(Q-&gt;front==Q-&gt;tail)//队列为空则不执行 
        return;
        QueueNode *p=Q-&gt;front-&gt;next;//获取队头的第一个有效结点 
        Q-&gt;front-&gt;next=p-&gt;next;//将队头的第一个有效结点从队列中断开 
        free(p);
        if(p==Q-&gt;tail)//如果删除的结点是最后的有效结点，需要更改尾指针的指向 
            p-&gt;next=Q-&gt;front;
} 
</code></pre>
<h1 id="循环队列">🔵循环队列</h1>
<h2 id="循环队列判满">🔸循环队列判满</h2>
<pre><code>    &lt;1&gt;当rear==MaxSize时，认为队满，但此时不一定是真的队满，因为随着部分元素出队，数组前面会出现一些空单位，这种现象称为假溢出
    &lt;2&gt;为了解决假溢出现象并使队列空间得到充分满足，可将顺序队列的数组看成一个环状结构，即规定最后一个单元的后继为第一个单元
    &lt;3&gt;真正的队满条件应是rear-front==MaxSize。在下述“循环队列判空&lt;1&gt;&quot;的条件下(rear+1)%MaxSize==front
</code></pre>
<h2 id="循环队列判空">🔸循环队列判空</h2>
<pre><code>    仅凭rear==front无法判断队列为空，下列给出两种方法。
    &lt;1&gt;损失一个元素的储存空间,当队尾指针所指向的空单元的后继单元，是队头元素所在的单元时，则停止入队。这样，队尾指针永远追不上队头指针，所以队满时不会有rear==front。
    注：上述方法中，front中储存元素，rear仅作为指针，不储存元素。
    &lt;2&gt;增设一个标志量，以区别队列是空还是满，这种方法不损失空间。
</code></pre>
<h2 id="循环队列插入元素">🔸循环队列插入元素</h2>
<pre><code>    rear=(rear+1)%MaxSize
</code></pre>
<h2 id="循环队列删除元素">🔸循环队列删除元素</h2>
<pre><code>    front=(front+1)%MaxSize
</code></pre>
<p><mark>注意：&lt;1&gt;循环队列中没有一个结点的指针域为NULL</mark></p>
]]></content>
    </entry>
</feed>